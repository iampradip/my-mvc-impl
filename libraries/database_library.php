<?phpclass database_library extends app_library {	private $_pdo;	public function __construct($controller){		parent::__construct($controller);		$this->reconnect();	}	public function pdo(){		return $this->_pdo;	}	public function reconnect(){		require_once "config/database.php";		$this->_pdo = new PDO(DATABASE_DBDRIVER.":dbname=".DATABASE_DATABASE.";host=".DATABASE_HOSTNAME, DATABASE_USERNAME, DATABASE_PASSWORD);		$this->_pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);		//$this->exec("SET GLOBAL max_allowed_packet = ".(1024 * 1024 * 512)); // sets maximum data size allowed to upload to db server	}		public function datetime($timestamp = FALSE){		if($timestamp === FALSE){			$timestamp = time();		}		return date("Y-m-d G:i:s", $timestamp);	}		// SQL		public function query($sql){		return $this->_pdo->query($sql)->fetchAll(PDO::FETCH_ASSOC);	}		public function exec($sql){		return $this->_pdo->exec($sql);	}		// count SELECT queries		public function count($table, $field, $field_value){		$pdo_statement = $this->_pdo->prepare("SELECT count(*) as total_rows FROM {$table} WHERE {$field} = :{$field}");		$pdo_statement->bindParam(":{$field}", $field_value);		$pdo_statement->execute();		$row = $pdo_statement->fetch(PDO::FETCH_ASSOC);		return (int) $row['total_rows'];	}		// INSERT queries		public function insert($table, $data_array){		$pdo_statement = $this->_pdo->prepare("INSERT INTO {$table} (".implode(", ", array_keys($data_array)).") VALUES (:".implode(", :", array_keys($data_array)).")");		foreach($data_array as $key => $value){			$pdo_statement->bindParam(":".$key, $data_array[$key]);		}		$pdo_statement->execute();		return $this->_pdo->lastInsertId();	}		// SELECT queries		public function select($table){		return $this->_pdo->query("SELECT * FROM {$table}")->fetchAll(PDO::FETCH_ASSOC);	}		public function selectById($table, $id, $field = FALSE){		$pdo_statement = $this->_pdo->prepare("SELECT ".($field === FALSE ? "*" : $field)." FROM {$table} WHERE id = :id LIMIT 1");		$pdo_statement->bindParam(":id", $id, PDO::PARAM_INT);		$pdo_statement->execute();		if($field === FALSE){			return $pdo_statement->fetch(PDO::FETCH_ASSOC);		} else {			$row = $pdo_statement->fetch(PDO::FETCH_ASSOC);			if(isset($row[$field]))				return $row[$field];			else				return FALSE;		}	}		public function selectWhere($table, $condition){		return $this->_pdo->query("SELECT * FROM {$table} WHERE ".$condition)->fetchAll(PDO::FETCH_ASSOC);	}		// DELETE queries		public function deleteById($table, $id){		$pdo_statement = $this->_pdo->prepare("DELETE FROM {$table} WHERE id = :id");		$pdo_statement->bindParam(":id", $id, PDO::PARAM_INT);		return $pdo_statement->execute();	}		public function deleteWhere($table, $condition){		return $this->_pdo->exec("DELETE FROM {$table} WHERE ".$condition);	}		// UPDATE queries		public function updateById($table, $id, $data_array){		$fields = array();		foreach($data_array as $key => $value){			array_push($fields, $key." = :".$key);		}		$pdo_statement = $this->_pdo->prepare("UPDATE {$table} SET ".implode(", ", $fields)." WHERE id = :id");		foreach($data_array as $key => $value){			$pdo_statement->bindParam(":".$key, $data_array[$key]);		}		$pdo_statement->bindParam(":id", $id, PDO::PARAM_INT);		return $pdo_statement->execute();	}		public function updateWhere($table, $condition, $data_array){		$fields = array();		foreach($data_array as $key => $value){			array_push($fields, $key." = :".$key);		}		$pdo_statement = $this->_pdo->prepare("UPDATE {$table} SET ".implode(", ", $fields)." WHERE ".$condition);		foreach($data_array as $key => $value){			$pdo_statement->bindParam(":".$key, $data_array[$key]);		}		return $pdo_statement->execute();	}}